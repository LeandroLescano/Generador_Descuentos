{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  /**\n   * True if this is running in Nodejs, will be undefined in a browser.\n   * In a browser, browserify won't include this file and the whole module\n   * will be resolved an empty object.\n   */\n  isNode: typeof Buffer !== \"undefined\",\n\n  /**\n   * Create a new nodejs Buffer from an existing content.\n   * @param {Object} data the data to pass to the constructor.\n   * @param {String} encoding the encoding to use.\n   * @return {Buffer} a new Buffer.\n   */\n  newBufferFrom: function newBufferFrom(data, encoding) {\n    // XXX We can't use `Buffer.from` which comes from `Uint8Array.from`\n    // in nodejs v4 (< v.4.5). It's not the expected implementation (and\n    // has a different signature).\n    // see https://github.com/nodejs/node/issues/8053\n    // A condition on nodejs' version won't solve the issue as we don't\n    // control the Buffer polyfills that may or may not be used.\n    return new Buffer(data, encoding);\n  },\n\n  /**\n   * Create a new nodejs Buffer with the specified size.\n   * @param {Integer} size the size of the buffer.\n   * @return {Buffer} a new Buffer.\n   */\n  allocBuffer: function allocBuffer(size) {\n    if (Buffer.alloc) {\n      return Buffer.alloc(size);\n    } else {\n      return new Buffer(size);\n    }\n  },\n\n  /**\n   * Find out if an object is a Buffer.\n   * @param {Object} b the object to test.\n   * @return {Boolean} true if the object is a Buffer, false otherwise.\n   */\n  isBuffer: function isBuffer(b) {\n    return Buffer.isBuffer(b);\n  },\n  isStream: function isStream(obj) {\n    return obj && typeof obj.on === \"function\" && typeof obj.pause === \"function\" && typeof obj.resume === \"function\";\n  }\n};","map":{"version":3,"sources":["C:/Users/Tateh/Desktop/ReactJs/generador-descuentos/node_modules/jszip/lib/nodejsUtils.js"],"names":["module","exports","isNode","Buffer","newBufferFrom","data","encoding","allocBuffer","size","alloc","isBuffer","b","isStream","obj","on","pause","resume"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACb;;;;;AAKAC,EAAAA,MAAM,EAAG,OAAOC,MAAP,KAAkB,WANd;;AAOb;;;;;;AAMAC,EAAAA,aAAa,EAAE,uBAASC,IAAT,EAAeC,QAAf,EAAyB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,WAAO,IAAIH,MAAJ,CAAWE,IAAX,EAAiBC,QAAjB,CAAP;AACH,GArBY;;AAsBb;;;;;AAKAC,EAAAA,WAAW,EAAE,qBAAUC,IAAV,EAAgB;AACzB,QAAIL,MAAM,CAACM,KAAX,EAAkB;AACd,aAAON,MAAM,CAACM,KAAP,CAAaD,IAAb,CAAP;AACH,KAFD,MAEO;AACH,aAAO,IAAIL,MAAJ,CAAWK,IAAX,CAAP;AACH;AACJ,GAjCY;;AAkCb;;;;;AAKAE,EAAAA,QAAQ,EAAG,kBAASC,CAAT,EAAW;AAClB,WAAOR,MAAM,CAACO,QAAP,CAAgBC,CAAhB,CAAP;AACH,GAzCY;AA2CbC,EAAAA,QAAQ,EAAG,kBAAUC,GAAV,EAAe;AACtB,WAAOA,GAAG,IACN,OAAOA,GAAG,CAACC,EAAX,KAAkB,UADf,IAEH,OAAOD,GAAG,CAACE,KAAX,KAAqB,UAFlB,IAGH,OAAOF,GAAG,CAACG,MAAX,KAAsB,UAH1B;AAIH;AAhDY,CAAjB","sourcesContent":["'use strict';\n\nmodule.exports = {\n    /**\n     * True if this is running in Nodejs, will be undefined in a browser.\n     * In a browser, browserify won't include this file and the whole module\n     * will be resolved an empty object.\n     */\n    isNode : typeof Buffer !== \"undefined\",\n    /**\n     * Create a new nodejs Buffer from an existing content.\n     * @param {Object} data the data to pass to the constructor.\n     * @param {String} encoding the encoding to use.\n     * @return {Buffer} a new Buffer.\n     */\n    newBufferFrom: function(data, encoding) {\n        // XXX We can't use `Buffer.from` which comes from `Uint8Array.from`\n        // in nodejs v4 (< v.4.5). It's not the expected implementation (and\n        // has a different signature).\n        // see https://github.com/nodejs/node/issues/8053\n        // A condition on nodejs' version won't solve the issue as we don't\n        // control the Buffer polyfills that may or may not be used.\n        return new Buffer(data, encoding);\n    },\n    /**\n     * Create a new nodejs Buffer with the specified size.\n     * @param {Integer} size the size of the buffer.\n     * @return {Buffer} a new Buffer.\n     */\n    allocBuffer: function (size) {\n        if (Buffer.alloc) {\n            return Buffer.alloc(size);\n        } else {\n            return new Buffer(size);\n        }\n    },\n    /**\n     * Find out if an object is a Buffer.\n     * @param {Object} b the object to test.\n     * @return {Boolean} true if the object is a Buffer, false otherwise.\n     */\n    isBuffer : function(b){\n        return Buffer.isBuffer(b);\n    },\n\n    isStream : function (obj) {\n        return obj &&\n            typeof obj.on === \"function\" &&\n            typeof obj.pause === \"function\" &&\n            typeof obj.resume === \"function\";\n    }\n};\n"]},"metadata":{},"sourceType":"script"}